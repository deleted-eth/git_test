Hello world.


COMMANDS:

cd: change directory (or, I like to say, crawl directory--move between)
mkdir [path]: make directory
	'-p' option will generate nonexistent intermediate directories in [path]
touch [name]: Create a 0byte file
ls -Fhstrl: my favorite way to list
ls -FRhstrl: an even more powerful, recursive search. Shows ALL sub-directories
wc: word, line, character, and byte count
cp [old] [new]: copy
mv [old] [new]: move (also rename)
pwd: print working directory
'.' : refers to current directory (exclude quotations)
'..' : refers to parent directory, relative to working directory (exclude quotations)
rm [path]: remove a file (note: does not work on directories)
	'-d' option will remove directories
	'-r' option will allow for recursive deletion of all rooted files (implies '-d')
rmdir [path]: removes directories
man: opens manual for whatever command you use as an argument (press 'q' to exit)
* : represents zero or more characters (example: *.pdb represents all .pdf files)
? : represents one character (example: ?ethane.pdb represents methane.pdb)
	-you can represent 3 characters w/ '???'
nano [file]: opens the nano text editor, [file] argument becomes name (if used)
code [file]: opens [file] in Vscode
cat [.txt]: view file contents
cat [.txt] [.txt] [.txt]: will "concatenate" or view sequentially the .txt files (files remain unchanged)


EXAMPLE:

%ls -F ~/Desktop/shell-lesson-data

SYNTAX (SEE ABOVE):

%: 			     "prompt"
ls: 			     "command" (in this case, "list")
-F: 			     "options" (in this case, 'file type' - case sensitive)
~/Desktop/shell-lesson-data: "argument" (in this case a directory I want to list)


Commands related to a remote repository:
'git clone git@github.com:USER-NAME/REPOSITORY-NAME.git'
'git push' or 'git push origin main' (Both accomplish the same goal in this context)

Commands related to the workflow:
'git add .'
'git commit -m "A message describing what you have done to make this snapshot different"'

Commands related to checking status or log history
'git status'
'git log'

The basic Git syntax is program | action | destination.

For example,

git add . is read as git | add | ., where the period represents everything in the current directory;
'git commit -m "message"' is read as git | commit -m | "message"; and
'git status' is read as git | status | (no destination).

In order to see what commits haven't been pushed, use:
git log origin/main..HEAD

Git commit anatomy: Subject and Body
Subject: A brief summary of the change you made to the project
Body: Description the problem your commit solves


7 Rules of a great Git commit message:
1. Separate the subject from the body with a blank line
2. Limit the subject line to 50 characters
3. Capitalize the subject line
4. Do not end the subject line with a period
5. Use the imperative mood in the subject line (spoken or written as if giving a command or instruction, i.e. "clean your room")
6. Wrap the body at 72 characters
7. Use the body to explain what and why instead of how

Example:

Summarize changes in around 50 characters or less

More detailed explanatory text, if necessary. Wrap it to about 72
characters or so. In some contexts, the first line is treated as the
subject of the commit and the rest of the text as the body. The
blank line separating the summary from the body is critical (unless
you omit the body entirely); various tools like `log`, `shortlog`
and `rebase` can get confused if you run the two together.

Explain the problem that this commit is solving. Focus on why you
are making this change as opposed to how (the code explains that).
Are there side effects or other unintuitive consequences of this
change? Here's the place to explain them.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded
   by a single space, with blank lines in between, but conventions
   vary here

If you use an issue tracker, put references to them at the bottom,
like this:

Resolves: #123
See also: #456, #789

